defmodule Chapter5Test do
  defmodule Exercises1To3 do
    use ExUnit.Case
    doctest Chapter5.Exercises1To3

    test "double" do
      assert Chapter5.Exercises1To3.double(2) == 4
    end

    test "triple" do
      assert Chapter5.Exercises1To3.triple(2) == 6
    end

    test "quadruple" do
      assert Chapter5.Exercises1To3.quadruple(2) == 8
    end
  end
  defmodule Factorial do
    use ExUnit.Case
    doctest Chapter5.Factorial

    test "0! is 1" do
      assert Chapter5.Factorial.of(0) == 1
    end

    test "1! is 1" do
      assert Chapter5.Factorial.of(1) == 1
    end

    test "2! is 2" do
      assert Chapter5.Factorial.of(2) == 2
    end

    test "3! is 6" do
      assert Chapter5.Factorial.of(3) == 6
    end

    test "4! is 24" do
      assert Chapter5.Factorial.of(4) == 24
    end

    test "100! is 24" do
      #LOL
      assert Chapter5.Factorial.of(1000) == 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    end
  end

  defmodule ModulesAndFunctions4 do
    use ExUnit.Case
    doctest Chapter5.ModulesAndFunctions4

    test "summate 0 is 0" do
      assert Chapter5.ModulesAndFunctions4.summate(0) == 0
    end

    test "summate 1 is 1" do
      assert Chapter5.ModulesAndFunctions4.summate(1) == 1
    end

    test "summate 2 is 3" do
      assert Chapter5.ModulesAndFunctions4.summate(2) == 3
    end

    test "summate 1000 is 500500" do
      assert Chapter5.ModulesAndFunctions4.summate(1000) == 500500
    end
  end

  defmodule ModulesAndFunctions5 do
    use ExUnit.Case
    doctest Chapter5.ModulesAndFunctions5

    test "gcd of 1,0 is 1" do
      assert Chapter5.ModulesAndFunctions5.gcd(1,0) == 1
    end

    test "gcd of 2,0 is 1" do
      assert Chapter5.ModulesAndFunctions5.gcd(2,0) == 2
    end

    test "gcd of 360,90 is 90" do
      assert Chapter5.ModulesAndFunctions5.gcd(360,90) == 90
    end

    test "gcd of 12,8 is 4" do
      assert Chapter5.ModulesAndFunctions5.gcd(12,8) == 4
    end
  end
  defmodule Guard do
    use ExUnit.Case
    doctest Chapter5.Guard

    test "what_is detects number" do
      assert  Chapter5.Guard.what_is(99) == "99 is a number"
    end

    test "what_is detects list" do
      assert  Chapter5.Guard.what_is([1,2,3,4,5]) == "\x01\x02\x03\x04\x05 is a list"
    end

    test "what_is detects atom" do
      assert  Chapter5.Guard.what_is(:myatom) == "myatom is an atom"
    end
  end

  defmodule FactorialBetter do
    use ExUnit.Case
    doctest Chapter5.Factorial

    test "0! is 1" do
      assert Chapter5.FactorialBetter.of(0) == 1
    end

    test "1! is 1" do
      assert Chapter5.FactorialBetter.of(1) == 1
    end

    test "2! is 2" do
      assert Chapter5.FactorialBetter.of(2) == 2
    end

    test "3! is 6" do
      assert Chapter5.FactorialBetter.of(3) == 6
    end

    test "4! is 24" do
      assert Chapter5.FactorialBetter.of(4) == 24
    end

    test "100! is 24" do
      #LOL
      assert Chapter5.FactorialBetter.of(1000) == 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    end

    test "-1! fails" do
      assert_raise FunctionClauseError, fn ->
        Chapter5.FactorialBetter.of(-1)
      end
    end
  end
end
